
from print_data import *
from database_query_exec import *
from psycopg2.extras import Json
from datetime import datetime

def read_file(input_file_path, connection_id_pg):
    count = 0
    with open(input_file_path, 'r') as inp_file:
        for each_line in inp_file:
            count = count + 1
            PURCHASE_ORDER_NUMBER, DIVISION_CODE_CR_D, PO_APPROVAL_IND_D, PO_APPROVAL_DATE_D, \
            PO_MODIFIED_IND_D, PO_MODIFIED_DATE_D, PO_CANCELLED_IND_D, PO_CANCELLED_DATE_D, \
            PO_VOIDED_IND_D, STATION_MNEMONIC_CODE_D, FILLER_D, REGION_CODE_CR_R, \
            PO_APPROVAL_IND_R, PO_APPROVAL_DATE_R, PO_MODIFIED_IND_R, PO_MODIFIED_DATE_R, \
            PO_CANCELLED_IND_R, PO_CANCELLED_DATE_R, PO_VOIDED_IND_R, STATION_MNEMONIC_CODE_R, \
            FILLER_R, MEGA_ZONE_CODE_CR_M, PO_APPROVAL_IND_M, PO_APPROVAL_DATE_M, \
            PO_MODIFIED_IND_M, PO_MODIFIED_DATE_M, PO_CANCELLED_IND_M, PO_CANCELLED_DATE_M, \
            PO_VOIDED_IND_M, STATION_MNEMONIC_CODE_M, FILLER_M, FLT_OWNER_CODE_CR_F, \
            PO_APPROVAL_IND_F, PO_APPROVAL_DATE_F, PO_MODIFIED_IND_F, PO_MODIFIED_DATE_F, \
            PO_CANCELLED_IND_F, PO_CANCELLED_DATE_F, PO_VOIDED_IND_F, STATION_MNEMONIC_CODE_F, \
            FILLER_F, VEHICLE_COST_AMOUNT, DEAL_CODE, VEH_PVT_DEALER_CODE, \
            PO_ORDER_YEAR, VEHICLE_MAKE_CODE, VEHICLE_MODEL_CODE, VEHICLE_BODY_CODE, \
            VEH_OPTION_INFO, VEHICLE_PACKAGE_CODE_INFO, PO_EXT_INT_TOP_CODE_INFO, VEH_CONTRACT_CODE, \
            VEH_CONTRACT_CYCLE_CODE, VEH_LEASE_TERM_NUMBER, MAKE_MOD_VIN_CODE, PO_INITIATOR_ID_CODE, \
            VEHICLES_INVOICED_NUMBER, VEHICLES_RECEIVED_NUMBER, TOT_VEH_ORDER_NUMBER, PO_ORDER_DATE, \
            PO_DELIVER_BY_DATE, DELIVER_DATE_YYMMDD_KEY, PO_PURCHASE_TYPE, PO_DUP_IND, \
            TOTAL_OPTIONS_NUMBER, BILL_TO_LOCATION_NUMBER_CR, DEL_TO_LOCATION_NUMBER_CR, TRANSFER_TO_LOCATION_NO_CR, \
            PO_VALID_IND, PO_DELIVERING_DEALER_CODE, DELIVER_TO_CITY_NAME, VEH_PVT_IND, \
            MANU_CLASS_CODE, PO_TRANS_STATUS_IND, MFR_DEL_TO_LOC_CODE, FON_CANCELLED_COUNT, \
            FILLER_1X_1, MSO_PROCESS_COUNT, FON_LAST_UPDATE_DATE, ITEM_NUM_STAT_IND_INFO, \
            ACKS_RECEIVED_COUNT, TRANSMITTED_DATE, TRANSMITTED_TIME, PRIORITY_LEAD_TIME, \
            MANUFACTURER_CODE_QUICK_SPEC_CODE, BODY_SUFFIX_CODE_QUICK_SPEC_CODE, FINANCE_ALLOWANCE_INFO, MFR_DEALER_CODE, \
            PVT_ADVICE_INDICATOR, MANUFACTURER_CODE_ENGINE_INFO, BODY_SUFFIX_CODE_ENGINE_INFO, MANUFACTURER_CODE_TIRE_INFO, \
            BODY_SUFFIX_CODE_TIRE_INFO, LAST_TRANS_TYPE_CODE, NON_STANDARD_PRIORITY_IND, WEEK_PRIORITY_IND, \
            MONTH_PRIORITY_IND, COUNTRY_CODE, PO_DEPRECIATION_AMOUNT, PO_DEPRECIATION_RATE, \
            PO_BUYBACK_CODE, RETAIL_VEHICLE_COST_AMOUNT, GM_STANDARD_PROD_WEEK_NO, MONDAY_BUILD_WEEK_NO, \
            VEHICLE_TYPE_CODE, DEALER_ZONE_CODE, INTL_PLATE_COST_PU_AMT, INTL_AGE_NUMBER, \
            EMISSION_CODE, EDIT_OVERRIDE, YEAR_PRIORITY_IND, PO_DISPOSAL_DATE, \
            CALIFORNIA_EMISSIONS_IND, SERVICE_VEHICLE_IND, USE_CODE_MODIFY_DATE, VEHICLE_BODY_STYLE_CODE, \
            WIZARD_COLOR_CODE, DISPOSAL_TERM_NUMBER, GM_ORD_THRU_BUS_ASSOC_CD, GM_ORD_THRU_BUS_FUNC_CD, \
            GM_DEAL_BUS_ASSOC_CD, GM_DEAL_BUS_FUNC_CD, GM_DEL_TO_LOC_BUS_ASSOC_CD, GM_DEL_TO_LOC_BUS_FUNC_CD, \
            PRIM_TARG_PROD_DTE, SEC_TARG_PROD_DTE, ORIG_TRANS_DT, ORIG_TRANS_TI, \
            PO_RTRANS_IND, FILLER_42X_1 = each_line.split('~')
            

        
            # if count > 5:
            #     break
            
            # print ("##"*75)
            # print_pos(each_line)

            # process VEH-OPTION-INFO OCCURS 25 TIMES.
            VEH_OPTION_INFO_START_POS = 0
            VEH_OPTION_INFO_LEN = 17
            VEH_OPTION_INFO_DICT = dict()
            for x in range(25):
                VEH_OPTION_INFO_END_POS = VEH_OPTION_INFO_START_POS + VEH_OPTION_INFO_LEN
                data_part = VEH_OPTION_INFO[VEH_OPTION_INFO_START_POS:VEH_OPTION_INFO_END_POS]
                VEHICLE_MINUS_OPTION_IND = data_part[0]
                MANUFACTURER_CODE_VEHICLE_OPTION_CODE_INFO = data_part[1:9]
                BODY_SUFFIX_CODE_VEHICLE_OPTION_CODE_INFO  = data_part[9:17]
                VEH_OPTION_INFO_START_POS = VEH_OPTION_INFO_END_POS
                key = 'veh_option_info_' + str(x+1)
                data_dict = dict()
                if len(MANUFACTURER_CODE_VEHICLE_OPTION_CODE_INFO.strip()) > 0:
                    data_dict['VEHICLE_MINUS_OPTION_IND'] = VEHICLE_MINUS_OPTION_IND
                    data_dict['MANUFACTURER_CODE_VEHICLE_OPTION_CODE_INFO'] = MANUFACTURER_CODE_VEHICLE_OPTION_CODE_INFO
                    data_dict['BODY_SUFFIX_CODE_VEHICLE_OPTION_CODE_INFO']  = BODY_SUFFIX_CODE_VEHICLE_OPTION_CODE_INFO
                    VEH_OPTION_INFO_DICT[key] = data_dict
            # print ("VEH_OPTION_INFO ---> {}".format(VEH_OPTION_INFO_DICT))



        # process VEHICLE-PACKAGE-CODE-INFO OCCURS 10 TIMES.
            VEHICLE_PACKAGE_CODE_INFO_START_POS = 0
            VEHICLE_PACKAGE_CODE_INFO_LEN = 16
            VEHICLE_PACKAGE_CODE_INFO_DICT = dict()
            for x in range(10):
                VEHICLE_PACKAGE_CODE_INFO_END_POS = VEHICLE_PACKAGE_CODE_INFO_START_POS + VEHICLE_PACKAGE_CODE_INFO_LEN
                data_part = VEHICLE_PACKAGE_CODE_INFO[VEHICLE_PACKAGE_CODE_INFO_START_POS:VEHICLE_PACKAGE_CODE_INFO_END_POS]
                MANUFACTURER_CODE_VEHICLE_PACKAGE_CODE_INFO = data_part[0:8]
                BODY_SUFFIX_CODE_VEHICLE_PACKAGE_CODE_INFO  = data_part[8:16]
                VEH_OPTION_INFO_START_POS = VEH_OPTION_INFO_END_POS
                key = 'vehicle_package_code_info_' + str(x+1)
                data_dict = dict()
                if len(MANUFACTURER_CODE_VEHICLE_PACKAGE_CODE_INFO.strip()) > 0:
                    data_dict['MANUFACTURER_CODE_VEHICLE_PACKAGE_CODE_INFO'] = MANUFACTURER_CODE_VEHICLE_PACKAGE_CODE_INFO
                    data_dict['BODY_SUFFIX_CODE_VEHICLE_PACKAGE_CODE_INFO']  = BODY_SUFFIX_CODE_VEHICLE_PACKAGE_CODE_INFO
                    VEHICLE_PACKAGE_CODE_INFO_DICT[key] = data_dict
            # print ("-*"*50)
            # print ("VEHICLE_PACKAGE_CODE_INFO_DICT ---> {}".format(VEHICLE_PACKAGE_CODE_INFO_DICT))

        
        # process PO-EXT-INT-TOP-CODE-INFO OCCURS 25 TIMES.
            PO_EXT_INT_TOP_CODE_INFO_START_POS = 0
            PO_EXT_INT_TOP_CODE_INFO_LEN = 50
            PO_EXT_INT_TOP_CODE_INFO_DICT = dict()
            for x in range(25):
                PO_EXT_INT_TOP_CODE_INFO_END_POS = PO_EXT_INT_TOP_CODE_INFO_START_POS + PO_EXT_INT_TOP_CODE_INFO_LEN
                data_part = PO_EXT_INT_TOP_CODE_INFO[PO_EXT_INT_TOP_CODE_INFO_START_POS:PO_EXT_INT_TOP_CODE_INFO_END_POS]
                COLOR_COMBINATION_COUNT_PO_EXT_INT_TOP_CODE_INFO = data_part[0:2]
                MANUFACTURER_CODE_EXT_COLOR_CODE_INFO = data_part[2:10]
                BODY_SUFFIX_CODE_EXT_COLOR_CODE_INFO  = data_part[10:18]
                MANUFACTURER_CODE_INT_COLOR_CODE_INFO = data_part[18:26]
                BODY_SUFFIX_CODE_INT_COLOR_CODE_INFO  = data_part[26:34]
                MANUFACTURER_CODE_TOP_COLOR_CODE_INFO = data_part[34:42]
                BODY_SUFFIX_CODE_TOP_COLOR_CODE_INFO  = data_part[42:50]
                PO_EXT_INT_TOP_CODE_INFO_START_POS = PO_EXT_INT_TOP_CODE_INFO_END_POS
                key = 'po_ext_int_top_code_info_' + str(x+1)
                data_dict = dict()
                if  len(MANUFACTURER_CODE_EXT_COLOR_CODE_INFO.strip()) == 0 and \
                    len(MANUFACTURER_CODE_INT_COLOR_CODE_INFO.strip()) == 0 and \
                    len(MANUFACTURER_CODE_TOP_COLOR_CODE_INFO.strip()) == 0:
                    pass
                else:
                    data_dict['COLOR_COMBINATION_COUNT_PO_EXT_INT_TOP_CODE_INFO'] = COLOR_COMBINATION_COUNT_PO_EXT_INT_TOP_CODE_INFO
                    data_dict['MANUFACTURER_CODE_EXT_COLOR_CODE_INFO']  = MANUFACTURER_CODE_EXT_COLOR_CODE_INFO
                    data_dict['BODY_SUFFIX_CODE_EXT_COLOR_CODE_INFO']   = BODY_SUFFIX_CODE_EXT_COLOR_CODE_INFO
                    data_dict['MANUFACTURER_CODE_INT_COLOR_CODE_INFO']  = MANUFACTURER_CODE_INT_COLOR_CODE_INFO
                    data_dict['BODY_SUFFIX_CODE_INT_COLOR_CODE_INFO']   = BODY_SUFFIX_CODE_INT_COLOR_CODE_INFO
                    data_dict['MANUFACTURER_CODE_TOP_COLOR_CODE_INFO']  = MANUFACTURER_CODE_TOP_COLOR_CODE_INFO
                    data_dict['BODY_SUFFIX_CODE_TOP_COLOR_CODE_INFO']   = BODY_SUFFIX_CODE_TOP_COLOR_CODE_INFO
                    PO_EXT_INT_TOP_CODE_INFO_DICT[key] = data_dict
            # print ("-*"*50)
            # print ("PO_EXT_INT_TOP_CODE_INFO_DICT ---> {}".format(PO_EXT_INT_TOP_CODE_INFO_DICT))


        # process ITEM-NUM-STAT-IND-INFO OCCURS 25 TIMES. 
            ITEM_NUM_STAT_IND_INFO_START_POS = 0
            ITEM_NUM_STAT_IND_INFO_LEN = 1
            ITEM_NUM_STAT_IND_INFO_DICT = dict()
            # for x in range(25):
            #     ITEM_NUM_STAT_IND_INFO_END_POS = ITEM_NUM_STAT_IND_INFO_START_POS + ITEM_NUM_STAT_IND_INFO_LEN
            #     data_part = ITEM_NUM_STAT_IND_INFO[ITEM_NUM_STAT_IND_INFO_START_POS:ITEM_NUM_STAT_IND_INFO_END_POS]
            #     ITEM_NUMBER_STATUS_IND = data_part[0:1]
            #     key = 'item_num_stat_ind_info_' + str(x+1)
            #     data_dict = dict()
            #     data_dict['ITEM_NUMBER_STATUS_IND'] = ITEM_NUMBER_STATUS_IND
            #     ITEM_NUM_STAT_IND_INFO_DICT[key] = data_dict
            # print ("-*"*50)
            # print ("ITEM_NUM_STAT_IND_INFO_DICT ---> {}".format(ITEM_NUM_STAT_IND_INFO_DICT))



        # process FINANCE-ALLOWANCE-INFO OCCURS 25 TIMES. 
            FINANCE_ALLOWANCE_INFO_START_POS = 0
            FINANCE_ALLOWANCE_INFO_LEN = 1
            FINANCE_ALLOWANCE_INFO_DICT = dict()
            for x in range(25):
                FINANCE_ALLOWANCE_INFO_END_POS = FINANCE_ALLOWANCE_INFO_START_POS + FINANCE_ALLOWANCE_INFO_LEN
                data_part = FINANCE_ALLOWANCE_INFO[FINANCE_ALLOWANCE_INFO_START_POS:FINANCE_ALLOWANCE_INFO_END_POS]
                MANUFACTURER_CODE_FINANCE_ALLOWANCE = data_part[0:8]
                BODY_SUFFIX_CODE_FINANCE_ALLOWANCE  = data_part[8:16]
                key = 'finance_allowance_info_' + str(x+1)
                data_dict = dict()
                if len(MANUFACTURER_CODE_FINANCE_ALLOWANCE.strip()) > 0:
                    data_dict['MANUFACTURER_CODE_FINANCE_ALLOWANCE'] = MANUFACTURER_CODE_FINANCE_ALLOWANCE
                    data_dict['BODY_SUFFIX_CODE_FINANCE_ALLOWANCE']  = BODY_SUFFIX_CODE_FINANCE_ALLOWANCE
                    FINANCE_ALLOWANCE_INFO_DICT[key] = data_dict
            # print ("-*"*50)
            # print ("FINANCE_ALLOWANCE_INFO_DICT ---> {}".format(FINANCE_ALLOWANCE_INFO_DICT))

            CURRENT_TIMESTAMP = str(datetime.now())
            # CURRENT_TIMESTAMP = '2024-10-10'
            print ("str-------->{}".format(CURRENT_TIMESTAMP))

            if len(PO_APPROVAL_DATE_D.strip()) == 0:
                PO_APPROVAL_DATE_D = '0001-01-01'
            if len(PO_APPROVAL_DATE_R.strip()) == 0:
                PO_APPROVAL_DATE_R = '0001-01-01'
            if len(PO_APPROVAL_DATE_M.strip()) == 0:
                PO_APPROVAL_DATE_M = '0001-01-01'
            if len(PO_APPROVAL_DATE_F.strip()) == 0:
                PO_APPROVAL_DATE_F = '0001-01-01'
            if len(PO_MODIFIED_DATE_D.strip()) == 0:
                PO_MODIFIED_DATE_D = '0001-01-01'
            if len(PO_MODIFIED_DATE_R.strip()) == 0:
                PO_MODIFIED_DATE_R = '0001-01-01'
            if len(PO_MODIFIED_DATE_M.strip()) == 0:
                PO_MODIFIED_DATE_M = '0001-01-01'
            if len(PO_MODIFIED_DATE_F.strip()) == 0:
                PO_MODIFIED_DATE_F = '0001-01-01'
            if len(PO_CANCELLED_DATE_D.strip()) == 0:
                PO_CANCELLED_DATE_D = '0001-01-01'
            if len(PO_CANCELLED_DATE_R.strip()) == 0:
                PO_CANCELLED_DATE_R = '0001-01-01'
            if len(PO_CANCELLED_DATE_M.strip()) == 0:
                PO_CANCELLED_DATE_M = '0001-01-01'
            if len(PO_CANCELLED_DATE_F.strip()) == 0:
                PO_CANCELLED_DATE_F = '0001-01-01'
            if len(PO_ORDER_DATE.strip()) == 0:
                PO_ORDER_DATE = '0001-01-01'
            if len(PO_DELIVER_BY_DATE.strip()) == 0:
                PO_DELIVER_BY_DATE = '0001-01-01'
            if len(DELIVER_DATE_YYMMDD_KEY.strip()) == 0:
                DELIVER_DATE_YYMMDD_KEY = '0001-01-01'
            if len(FON_LAST_UPDATE_DATE.strip()) == 0:
                FON_LAST_UPDATE_DATE = '0001-01-01'
            if len(TRANSMITTED_DATE.strip()) == 0:
                TRANSMITTED_DATE = '0001-01-01'
            if len(PO_DISPOSAL_DATE.strip()) == 0:
                PO_DISPOSAL_DATE = '0001-01-01'
            if len(USE_CODE_MODIFY_DATE.strip()) == 0:
                USE_CODE_MODIFY_DATE = '0001-01-01'
            if len(PRIM_TARG_PROD_DTE.strip()) == 0:
                PRIM_TARG_PROD_DTE = '0001-01-01'
            if len(SEC_TARG_PROD_DTE.strip()) == 0:
                SEC_TARG_PROD_DTE = '0001-01-01'
            if len(ORIG_TRANS_DT.strip()) == 0:
                ORIG_TRANS_DT = '0001-01-01'

            purchase_order_data = (
            PURCHASE_ORDER_NUMBER, DIVISION_CODE_CR_D, PO_APPROVAL_IND_D, PO_APPROVAL_DATE_D, \
            PO_MODIFIED_IND_D, PO_MODIFIED_DATE_D, PO_CANCELLED_IND_D, PO_CANCELLED_DATE_D, \
            PO_VOIDED_IND_D, STATION_MNEMONIC_CODE_D, REGION_CODE_CR_R, \
            PO_APPROVAL_IND_R, PO_APPROVAL_DATE_R, PO_MODIFIED_IND_R, PO_MODIFIED_DATE_R, \
            PO_CANCELLED_IND_R, PO_CANCELLED_DATE_R, PO_VOIDED_IND_R, STATION_MNEMONIC_CODE_R, \
            MEGA_ZONE_CODE_CR_M, PO_APPROVAL_IND_M, PO_APPROVAL_DATE_M, \
            PO_MODIFIED_IND_M, PO_MODIFIED_DATE_M, PO_CANCELLED_IND_M, PO_CANCELLED_DATE_M, \
            PO_VOIDED_IND_M, STATION_MNEMONIC_CODE_M, FLT_OWNER_CODE_CR_F, \
            PO_APPROVAL_IND_F, PO_APPROVAL_DATE_F, PO_MODIFIED_IND_F, PO_MODIFIED_DATE_F, \
            PO_CANCELLED_IND_F, PO_CANCELLED_DATE_F, PO_VOIDED_IND_F, STATION_MNEMONIC_CODE_F, \
            VEHICLE_COST_AMOUNT, DEAL_CODE, VEH_PVT_DEALER_CODE, \
            PO_ORDER_YEAR, VEHICLE_MAKE_CODE, VEHICLE_MODEL_CODE, VEHICLE_BODY_CODE, \
            Json(VEH_OPTION_INFO_DICT), Json(VEHICLE_PACKAGE_CODE_INFO_DICT), Json(PO_EXT_INT_TOP_CODE_INFO_DICT), VEH_CONTRACT_CODE, \
            VEH_CONTRACT_CYCLE_CODE, VEH_LEASE_TERM_NUMBER, MAKE_MOD_VIN_CODE, PO_INITIATOR_ID_CODE, \
            VEHICLES_INVOICED_NUMBER, VEHICLES_RECEIVED_NUMBER, TOT_VEH_ORDER_NUMBER, PO_ORDER_DATE, \
            PO_DELIVER_BY_DATE, DELIVER_DATE_YYMMDD_KEY, PO_PURCHASE_TYPE, PO_DUP_IND, \
            TOTAL_OPTIONS_NUMBER, BILL_TO_LOCATION_NUMBER_CR, DEL_TO_LOCATION_NUMBER_CR, TRANSFER_TO_LOCATION_NO_CR, \
            PO_VALID_IND, PO_DELIVERING_DEALER_CODE, DELIVER_TO_CITY_NAME, VEH_PVT_IND, \
            MANU_CLASS_CODE, PO_TRANS_STATUS_IND, MFR_DEL_TO_LOC_CODE, FON_CANCELLED_COUNT, \
            MSO_PROCESS_COUNT, FON_LAST_UPDATE_DATE, Json(ITEM_NUM_STAT_IND_INFO_DICT), \
            ACKS_RECEIVED_COUNT, TRANSMITTED_DATE, TRANSMITTED_TIME, PRIORITY_LEAD_TIME, \
            MANUFACTURER_CODE_QUICK_SPEC_CODE, BODY_SUFFIX_CODE_QUICK_SPEC_CODE, Json(FINANCE_ALLOWANCE_INFO_DICT), MFR_DEALER_CODE, \
            PVT_ADVICE_INDICATOR, MANUFACTURER_CODE_ENGINE_INFO, BODY_SUFFIX_CODE_ENGINE_INFO, MANUFACTURER_CODE_TIRE_INFO, \
            BODY_SUFFIX_CODE_TIRE_INFO, LAST_TRANS_TYPE_CODE, NON_STANDARD_PRIORITY_IND, WEEK_PRIORITY_IND, \
            MONTH_PRIORITY_IND, COUNTRY_CODE, PO_DEPRECIATION_AMOUNT, PO_DEPRECIATION_RATE, \
            PO_BUYBACK_CODE, RETAIL_VEHICLE_COST_AMOUNT, GM_STANDARD_PROD_WEEK_NO, MONDAY_BUILD_WEEK_NO, \
            VEHICLE_TYPE_CODE, DEALER_ZONE_CODE, INTL_PLATE_COST_PU_AMT, INTL_AGE_NUMBER, \
            EMISSION_CODE, EDIT_OVERRIDE, YEAR_PRIORITY_IND, PO_DISPOSAL_DATE, \
            CALIFORNIA_EMISSIONS_IND, SERVICE_VEHICLE_IND, USE_CODE_MODIFY_DATE, VEHICLE_BODY_STYLE_CODE, \
            WIZARD_COLOR_CODE, DISPOSAL_TERM_NUMBER, GM_ORD_THRU_BUS_ASSOC_CD, GM_ORD_THRU_BUS_FUNC_CD, \
            GM_DEAL_BUS_ASSOC_CD, GM_DEAL_BUS_FUNC_CD, GM_DEL_TO_LOC_BUS_ASSOC_CD, GM_DEL_TO_LOC_BUS_FUNC_CD, \
            PRIM_TARG_PROD_DTE, SEC_TARG_PROD_DTE, ORIG_TRANS_DT, ORIG_TRANS_TI, \
            PO_RTRANS_IND, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            # PO_RTRANS_IND, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)

            # print ("##--"*25)
            # print ("------->{}".format(purchase_order_data))
            insert_data(connection_id_pg, purchase_order_data)
            # input()

            # print ("Inserted Record ----> {}".format(count))



